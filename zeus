#!/usr/bin/env bash

# Define some colours
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
RESET="$(tput sgr0)"

logo () {
  echo "zeus - the utility wrapper for docker, docker-compose, docker-machine and docker-machine-nfs"
  version
  echo ""
}

version () {
  echo "zeus version 0.5"
}

usage () {
  logo

  cat <<EOF
Usage: $0 <command>

${YELLOW}Commands:${RESET}
  ${GREEN}init             ${RESET}Initialises Zeus and creates a Zeusfile
  ${GREEN}create           ${RESET}Creates the Docker machine for the first time
  ${GREEN}up               ${RESET}Starts the Docker containers
  ${GREEN}down             ${RESET}Removes the Docker containers
  ${GREEN}reload           ${RESET}Recreates the Docker containers
  ${GREEN}list             ${RESET}Lists Docker containers
  ${GREEN}ssh [container]  ${RESET}Connect via SSH to the specified container
  ${GREEN}info             ${RESET}Displays info for your Docker machine
  ${GREEN}destroy          ${RESET}Removes the Docker machine
  ${GREEN}fix              ${RESET}Attempts to fix any SSL or NFS issues
EOF
  exit
}

echoError () {
  echo -e "${RED}$1 ${RESET}"
}

echoAbort () {
  echoError "$1\n\nAborting.."; exit 1;
}

echoSuccess () {
  echo -e "${GREEN}$1${RESET}"
}

checkMachineRunning () {
  machine_state=$(docker-machine ls | sed 1d | grep "^$1\s" | awk '{print $4}')

  if [ "Running" != "${machine_state}" ]; then
    echo "false"; return
  fi

  echo "true"
}

setPropDefaults () {
  # Gather the env vars we need to run.
  [ -f $PWD/Zeusfile ] && source $PWD/Zeusfile;
  [ -z "$ZEUS_NAME" ] && echoAbort "Please set ZEUS_NAME in Zeusfile or ENV."
  [ -z "$ZEUS_DOMAIN" ] && echoAbort "Please set ZEUS_DOMAIN in Zeusfile or ENV."
  [ -z "$ZEUS_SHELL" ] && ZEUS_SHELL="bash";
  [ -z "$ZEUS_VIRTUALBOX_MEMORY" ] && ZEUS_VIRTUALBOX_MEMORY="1024"

  [ "$(checkMachineRunning ${ZEUS_NAME})" = "true" ] && {
    ZEUS_MACHINE_RUNNING="true"
  }
}

ensureCompatible () {
  # Check running on Darwin
  # [ "$(uname -s)" == "Darwin" ] || echo "Warning: zeus is for OS X only."

  # Check all required software is installed.
  for REQ_BINARY in docker docker-compose docker-machine docker-machine-nfs; do
    command -v "$REQ_BINARY" >/dev/null 2>&1 || {
      echoAbort "I require $REQ_BINARY but it's not installed."
    }
  done
}

zeusInit () {
  [ -f $PWD/Zeusfile ] && echoAbort "Zeusfile already exists."

  GUESSED_NAME=${PWD##*/}
  GUESSED_DOMAIN="$GUESSED_NAME.dev"

  read -p "What is your Docker project name? [$GUESSED_NAME] " ZEUS_NAME
  read -p "What is your Docker domain name? [$GUESSED_DOMAIN] " ZEUS_DOMAIN

  [ "$ZEUS_NAME" == "" ] && ZEUS_NAME="$GUESSED_NAME"
  [ "$ZEUS_DOMAIN" == "" ] && ZEUS_DOMAIN="$GUESSED_DOMAIN"

  cat >$PWD/Zeusfile <<EOL
# Automatically generated by zeus
ZEUS_NAME=$ZEUS_NAME
ZEUS_DOMAIN=$ZEUS_DOMAIN

# The default shell to run when SSH'ing into the container
ZEUS_SHELL=bash

# The default container to SSH into when running zeus ssh with no container argument
#ZEUS_DEFAULT_SSH_CONTAINER=
EOL

  echoSuccess "Created Zeusfile!"
  exit
}

zeusVersion () {
  version && exit
}

dockerEvalEnv () {
  [ -z "$ZEUS_MACHINE_RUNNING" ] && echoAbort "Machine ${ZEUS_NAME} does not exist."

  # We only want to eval once because it's a slow process.
  [ -z "$ZEUS_MACHINE_ACTIVE" ] && {
    eval $(docker-machine env ${ZEUS_NAME})
    ZEUS_MACHINE_ACTIVE="true"
  }
}

dockerMachineStart () {
  [ -z "$ZEUS_MACHINE_RUNNING" ] && {
    docker-machine start ${ZEUS_NAME}
    ZEUS_MACHINE_RUNNING="true"
  }
}

dockerMachineStop() {
  [ ! -z $ZEUS_MACHINE_RUNNING ] && {
    docker-machine stop ${ZEUS_NAME}
    unset ZEUS_MACHINE_RUNNING
    unset ZEUS_MACHINE_ACTIVE
  }
}

dockerMachineDestroy () {
  docker-machine rm ${ZEUS_NAME}
  unset ZEUS_MACHINE_RUNNING
  unset ZEUS_MACHINE_ACTIVE
}

dockerCreate () {
  docker-machine create --driver virtualbox --virtualbox-memory ${ZEUS_VIRTUALBOX_MEMORY} ${ZEUS_NAME}
  docker-machine-nfs ${ZEUS_NAME} -s="$PWD"

  dockerInfo

  read -p "Would you like to automatically add this to your hosts file? (y/n) " HOSTS_AUTO_UPDATE
  case "$HOSTS_AUTO_UPDATE" in
    y|Y ) updateHosts ;;
  esac
}

updateHosts () {
  IP=$(docker-machine ip ${ZEUS_NAME})
  echo "${IP}  ${ZEUS_DOMAIN}" | sudo tee -a /etc/hosts > /dev/null
}

dockerStart () {
  dockerMachineStart
  dockerEvalEnv

  echo "${YELLOW}Starting containers..${RESET}"
  docker-compose up -d
  echo "${GREEN}Started!${RESET}"
}

dockerStop () {
  [ -z "$ZEUS_MACHINE_RUNNING" ] && echoAbort "Machine ${ZEUS_NAME} already off!"

  dockerEvalEnv

  echo "${YELLOW}Stopping containers..${RESET}"

  [[ $(docker-compose ps -q) ]] && docker-compose down;

  dockerMachineStop

  echo "${GREEN}Stopped!${RESET}"
}

dockerInfo () {
  IP=$(docker-machine ip ${ZEUS_NAME})
  STATUS=$(docker-machine status ${ZEUS_NAME})

  echo "${GREEN}Virtual machine name: ${YELLOW} ${ZEUS_NAME} ${RESET}"
  echo "${GREEN}Domain: ${YELLOW} ${ZEUS_DOMAIN} ${RESET}"
  echo "${GREEN}IP Address: ${YELLOW} ${IP} ${RESET}"
  echo "${GREEN}Status: ${YELLOW} ${STATUS} ${RESET}"
}

dockerList () {
  dockerEvalEnv

  docker ps
}

dockerSsh () {
  CONTAINER="$1"
  if [[ "${CONTAINER}" == "" ]]; then
      CONTAINER=$(echo $ZEUS_DEFAULT_SSH_CONTAINER)
  fi

  if [[ "${CONTAINER}" == "" ]]; then
    echoAbort "You must provide a container name or ID. Run 'list' to identify your containers."
  fi

  dockerEvalEnv

  docker-compose run --rm ${CONTAINER} ${ZEUS_SHELL}
}

dockerFix () {
  [ -z "$ZEUS_MACHINE_RUNNING" ] && echoAbort "The docker-machine must be running."

  docker-machine regenerate-certs ${ZEUS_NAME} -f
  docker-machine-nfs ${ZEUS_NAME} -s="$PWD"

  echo "${YELLOW}Restarting nfsd -- sudo may be required...${RESET}"
  sudo nfsd restart
  echo "${GREEN}Success!${RESET}"

  dockerStop && dockerStart

  dockerInfo
}

[ $# -eq 0 ] && usage

[ "$1" == "init" ] && zeusInit
[ "$1" == "--version" -o "$1" == "-v" ] && zeusVersion

ensureCompatible
setPropDefaults

case "$1" in
  create)
    dockerCreate ;;
  up)
    dockerStart ;;
  down)
    dockerStop ;;
  reload)
    dockerStop && dockerStart ;;
  info)
    dockerInfo ;;
  list)
    dockerList ;;
  ssh)
    dockerSsh "$2" ;;
  destroy)
    dockerMachineDestroy ;;
  fix)
    dockerFix ;;
  *)
    usage ;;
esac
